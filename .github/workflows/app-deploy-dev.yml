name: app-deploy-dev

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/env/dev-ecs/**'
      - 'Dockerfile'
      - 'app/**'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Tag image à déployer (par défaut: short SHA)'
        required: false
        default: ''

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-dev
  cancel-in-progress: true

jobs:
  plan:
    name: Terraform plan (dev-ecs)
    environment: dev
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      NAME_PREFIX: ${{ vars.NAME_PREFIX }}     # fastapi
      ENVIRONMENT:   ${{ vars.ENVIRONMENT }}
      TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
      TF_BACKEND_DYNAMO_TABLE: ${{ vars.TF_BACKEND_DYNAMO_TABLE }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false }

      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS (OIDC) - deploy role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_DEPLOY_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare IMAGE_TAG
        id: tag
        shell: bash
        run: |
          TAG="${{ github.event.inputs.image_tag }}"
          if [ -z "$TAG" ]; then TAG="${GITHUB_SHA::12}"; fi
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Terraform plan
        working-directory: infra/env/dev-ecs
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.image_tag }}
        run: |
          chmod +x run.sh
          ./run.sh plan

  apply:
    name: Terraform apply (dev-ecs)
    environment: dev
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      NAME_PREFIX: ${{ vars.NAME_PREFIX }}     # fastapi
      ENVIRONMENT:   ${{ vars.ENVIRONMENT }}
      TF_BACKEND_BUCKET: ${{ vars.TF_BACKEND_BUCKET }}
      TF_BACKEND_DYNAMO_TABLE: ${{ vars.TF_BACKEND_DYNAMO_TABLE }}
    needs: [plan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false }

      - uses: hashicorp/setup-terraform@v3

      - name: Configure AWS (OIDC) - deploy role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_DEPLOY_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare IMAGE_TAG
        id: tag
        shell: bash
        run: |
          TAG="${{ github.event.inputs.image_tag }}"
          if [ -z "$TAG" ]; then TAG="latest-dev"; fi
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Terraform apply
        working-directory: infra/env/dev-ecs
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.image_tag }}
        run: |
          chmod +x run.sh
          ./run.sh apply

      - name: Wait for ECS service to be stable
        working-directory: infra/env/dev-ecs
        run: |
          CLUSTER=$(terraform output -raw cluster_name)
          SERVICE=$(terraform output -raw service_name)
          aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE"

      - name: Smoke check via ALB
        working-directory: infra/env/dev-ecs
        run: |
          ALB=$(terraform output -raw alb_dns_name)
          echo "ALB: http://$ALB/"
          # On tente 5 fois au cas où le container bootstrappe
          for i in {1..5}; do
            if curl -fsS "http://$ALB/health"; then
              echo "Smoke OK"
              exit 0
            fi
            echo "Retrying in 5s... ($i/5)"
            sleep 5
          done
          echo "Smoke check failed"
          exit 1

      - name: Show ALB URL
        working-directory: infra/env/dev-ecs
        run: ./run.sh url || true
